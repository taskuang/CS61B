Q: Is one sorting algorithm always faster than another?
A: No, each sorting algorithm will have varying efficiencies based on the input size and machine they're run on.
   What works best in one situation may not be best in every situation

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Asymptotic bounds are very broad and ignore constants when it comes to measuring complexity. For example, 3x^2 increases faster than x^2, but both would be written as theta(N^2). The differences in
   plots for these three algorithms can be attributed to differences in scaling factors that isn't included in their asymptotic bounds.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: As touched on above, empirical analysis of algorithms can separate algorithms with otherwise similar asymptotical bounds which are very broad and only describe the general function form than an algorithm
   suscribes to.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: No. If the sorting runs in constant time, it will require the same amount of time to sort regardless of the size of the input.

Q: How does changing nrepeats change the plot?
A: Nrepeats will not change the plot itself because it is an input size. Changing it will only move a point along the plot, and the point will get larger the higher nrepeats is

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: I did not have a partner t compare plots with

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: